import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { createClient } from '@/lib/supabase/client';
import { Lead, LeadFormData, statusOptions } from '@/types/crm';
import { PlusCircle, Search, Edit3, Trash2, Filter, X, Save, User, Tag, Calendar, Building, FileText, MapPin, ChevronDown, ChevronUp, CheckCircle, XCircle, AlertTriangle, Mail } from 'lucide-react';

// SortIndicator component
const SortIndicator = ({ field }: { field: string }) => (
  <span className="ml-1">
    <ChevronUp className="inline-block w-3 h-3 -mb-px" />
    <ChevronDown className="inline-block w-3 h-3 -mt-px" />
  </span>
);

interface StatusDisplayInfo {
  value: string;
  label: string;
  color: string;
}

interface Lead {
  id: string;
  name?: string;
  email?: string;
  phone?: string;
  status: string;
  address?: string;
  city?: string;
  state?: string;
  zip_code?: string;
  created_at?: string;
  updated_at?: string;
}

const CrmView: React.FC = () => {
  // Sorting & pagination state
  const [sortField, setSortField] = useState<keyof Lead | ''>('');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [rowsPerPage, setRowsPerPage] = useState<number>(10);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [statusFilter, setStatusFilter] = useState<string>('ALL');
  
  // Data state
  const [leads, setLeads] = useState<Lead[]>([]);
  const [filteredLeads, setFilteredLeads] = useState<Lead[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);
  const [currentLead, setCurrentLead] = useState<Lead | null>(null);
  const [formData, setFormData] = useState<Partial<Lead>>({});

  // Initialize Supabase client
  const supabase = createClient();

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      if (currentLead) {
        // Update existing lead
        const { error } = await supabase
          .from('crm_leads')
          .update(formData)
          .eq('id', currentLead.id);
          
        if (error) throw error;
        
        // Update local state
        setLeads(leads.map(lead => 
          lead.id === currentLead.id ? { ...lead, ...formData } : lead
        ));
      } else {
        // Create new lead
        const { data, error } = await supabase
          .from('crm_leads')
          .insert([formData])
          .select();
          
        if (error) throw error;
        
        // Add new lead to local state
        if (data && data[0]) {
          setLeads([...leads, data[0]]);
        }
      }
      
      // Reset form and close modal
      setFormData({});
      setIsFormOpen(false);
      setCurrentLead(null);
    } catch (error) {
      console.error('Error saving lead:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle editing a lead
  const handleEditLead = (lead: Lead) => {
    setCurrentLead(lead);
    setFormData({ ...lead });
    setIsFormOpen(true);
  };

  // Handle deleting a lead
  const handleDeleteLead = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this lead?')) {
      try {
        const { error } = await supabase
          .from('crm_leads')
          .delete()
          .eq('id', id);
          
        if (error) throw error;
        
        // Remove lead from local state
        setLeads(leads.filter(lead => lead.id !== id));
      } catch (error) {
        console.error('Error deleting lead:', error);
      }
    }
  };

  // Get badge color based on status
  const getStatusBadgeColor = (status: string) => {
    const statusInfo = statusOptions.find(opt => opt.value === status);
    return statusInfo?.color || 'bg-gray-100 text-gray-800';
  };

  // Fetch leads on component mount
  useEffect(() => {
    const fetchLeads = async () => {
      try {
        setIsLoading(true);
        console.log('Fetching leads from crm_leads table...');
        
        // First verify we have a valid Supabase client
        if (!supabase) {
          throw new Error('Supabase client not initialized');
        }
        
        // Check if we're authenticated
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();
        if (sessionError) {
          console.error('Session error:', sessionError);
          throw new Error('Authentication error: ' + sessionError.message);
        }
        
        if (!session) {
          throw new Error('No active session. Please log in.');
        }
        
        console.log('Session user ID:', session.user?.id);
        
        // Fetch leads from crm_leads table with error handling
        const { data, error, status, statusText } = await supabase
          .from('crm_leads')
          .select('*')
          .order('created_at', { ascending: false });
        
        console.log('Supabase response:', { data, error, status, statusText });
        
        if (error) {
          console.error('Supabase query error:', {
            message: error.message,
            code: error.code,
            details: error.details,
            hint: error.hint
          });
          throw error;
        }
        
        console.log(`Fetched ${data?.length || 0} leads`);
        setLeads(data || []);
        setFilteredLeads(data || []);
      } catch (error) {
        console.error('Error in fetchLeads:', {
          error,
          message: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : undefined
        });
        
        // You might want to show this error to the user in the UI
        setLeads([]);
        setFilteredLeads([]);
      } finally {
        setIsLoading(false);
      }
    };

    void fetchLeads();
  }, [supabase]); // Add supabase to dependencies

  // Filter and sort leads
  useEffect(() => {
    let result = [...leads];
    
    // Apply search filter
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      result = result.filter(lead => 
        (lead.first_name?.toLowerCase().includes(term)) ||
        (lead.last_name?.toLowerCase().includes(term)) ||
        (lead.email?.toLowerCase().includes(term)) ||
        (lead.company?.toLowerCase().includes(term)) ||
        (lead.address?.toLowerCase().includes(term))
      );
    }
    
    // Apply status filter
    if (statusFilter !== 'ALL') {
      result = result.filter(lead => lead.status === statusFilter);
    }
    
    // Apply sorting
    if (sortField) {
      result.sort((a, b) => {
        // Safely get values with proper type checking
        const aValue = sortField in a ? a[sortField as keyof Lead] : undefined;
        const bValue = sortField in b ? b[sortField as keyof Lead] : undefined;
        
        // Handle undefined or null values
        if (aValue === undefined || aValue === null) return sortDirection === 'asc' ? -1 : 1;
        if (bValue === undefined || bValue === null) return sortDirection === 'asc' ? 1 : -1;
        
        // Compare values based on their type
        if (typeof aValue === 'string' && typeof bValue === 'string') {
          return sortDirection === 'asc' 
            ? aValue.localeCompare(bValue)
            : bValue.localeCompare(aValue);
        }
        
        // For numbers, dates, or other comparable types
        if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
        return 0;
      });
    }
    
    setFilteredLeads(result);
    setCurrentPage(1); // Reset to first page when filters change
  }, [leads, searchTerm, statusFilter, sortField, sortDirection]);

  // Get paginated leads
  const paginatedLeads = useMemo(() => {
    const startIndex = (currentPage - 1) * rowsPerPage;
    return filteredLeads.slice(startIndex, startIndex + rowsPerPage);
  }, [filteredLeads, currentPage, rowsPerPage]);

  // Handle sorting
  const handleSort = (field: keyof Lead | '') => {
    if (sortField === field) {
      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  // Handle lead edit
  const handleEdit = (lead: Lead) => {
    setCurrentLead(lead);
    setFormData(lead);
    setIsFormOpen(true);
  };

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData) return;

    try {
      setIsLoading(true);
      
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');
      
      // Prepare lead data with owner_id
      const leadData = {
        ...formData,
        owner_id: user.id,
        status: formData.status || 'NEW'
      };
      
      if (currentLead) {
        // Update existing lead
        const { error } = await supabase
          .from('crm_leads')
          .update(leadData)
          .eq('id', currentLead.id);
          
        if (error) throw error;
      } else {
        // Create new lead
        const { error } = await supabase
          .from('crm_leads')
          .insert([leadData]);
          
        if (error) throw error;
      }
      
      // Refresh leads
      const { data, error } = await supabase
        .from('crm_leads')
        .select('*')
        .order('created_at', { ascending: false });
        
      if (error) throw error;
      
      setLeads(data || []);
      setIsFormOpen(false);
      setCurrentLead(null);
      setFormData({});
      
    } catch (error) {
      console.error('Error saving lead:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Get status badge class
  const getStatusBadge = (status: string) => {
    if (!status) return 'badge-ghost';
    const lowerStatus = status.toLowerCase();
    if (lowerStatus.includes('new') || lowerStatus.includes('open')) return 'badge-info';
    if (lowerStatus.includes('contacted') || lowerStatus.includes('step')) return 'badge-success';
    if (lowerStatus.includes('offer sent') || lowerStatus.includes('pending')) return 'badge-warning';
    if (lowerStatus.includes('not interested') || lowerStatus.includes('closed') || lowerStatus.includes('lost')) return 'badge-error';
    return 'badge-neutral';
  };

  // Show loading state
  if (isLoading && leads.length === 0) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-6 bg-base-200 min-h-screen">
      <h1 className="text-3xl font-bold mb-6 text-base-content">CRM Leads</h1>
      
      {/* Search and Filters */}
      <div className="mb-6 p-4 bg-base-100 rounded-lg shadow">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search leads..."
                className="input input-bordered w-full pl-10"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          <select 
            className="select select-bordered"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="ALL">All Statuses</option>
            {statusOptions.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
          <button 
            className="btn btn-primary"
            onClick={() => {
              setCurrentLead(null);
              setFormData({});
              setIsFormOpen(true);
            }}
          >
            <PlusCircle className="w-4 h-4 mr-2" />
            Add Lead
          </button>
        </div>
      </div>

      {/* Leads Table */}
      <div className="bg-base-100 rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="table w-full">
            <thead>
              <tr>
                <th>Name</th>
                <th>Status</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredLeads.map((lead) => (
                <tr key={lead.id}>
                  <td>{lead.name || 'N/A'}</td>
                  <td>
                    <span className={`badge ${getStatusBadgeColor(lead.status)}`}>
                      {statusOptions.find(s => s.value === lead.status)?.label || lead.status}
                    </span>
                  </td>
                  <td>{lead.email || 'N/A'}</td>
                  <td>{lead.phone || 'N/A'}</td>
                  <td className="flex gap-2">
                    <button 
                      className="btn btn-ghost btn-xs"
                      onClick={() => handleEditLead(lead)}
                    >
                      <Edit3 className="w-4 h-4" />
                    </button>
                    <button 
                      className="btn btn-ghost btn-xs"
                      onClick={() => handleDeleteLead(lead.id)}
                    >
                      <Trash2 className="w-4 h-4 text-error" />
                    </button>
                  </td>
                </tr>
              ))}
              {filteredLeads.length === 0 && (
                <tr>
                  <td colSpan={5} className="text-center py-8 text-gray-500">
                    No leads found. Try adjusting your search or add a new lead.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="flex justify-between items-center p-4 border-t">
          <div className="text-sm text-gray-500">
            Showing {Math.min((currentPage - 1) * rowsPerPage + 1, filteredLeads.length)} to {Math.min(currentPage * rowsPerPage, filteredLeads.length)} of {filteredLeads.length} entries
          </div>
          <div className="join">
            <button 
              className="join-item btn btn-sm"
              onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
              disabled={currentPage === 1}
            >
              Previous
            </button>
            <button className="join-item btn btn-sm btn-active">
              {currentPage}
            </button>
            <button 
              className="join-item btn btn-sm"
              onClick={() => setCurrentPage(p => p + 1)}
              disabled={currentPage * rowsPerPage >= filteredLeads.length}
            >
              Next
            </button>
          </div>
        </div>
      </div>

      {/* Edit/Add Lead Modal */}
      {isFormOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-base-100 rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold">
                  {currentLead ? 'Edit Lead' : 'Add New Lead'}
                </h2>
                <button 
                  className="btn btn-circle btn-ghost btn-sm"
                  onClick={() => setIsFormOpen(false)}
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
              
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Name</span>
                    </label>
                    <input
                      type="text"
                      name="name"
                      className="input input-bordered w-full"
                      value={formData.name || ''}
                      onChange={handleInputChange}
                      required
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Email</span>
                    </label>
                    <input
                      type="email"
                      name="email"
                      className="input input-bordered w-full"
                      value={formData.email || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Phone</span>
                    </label>
                    <input
                      type="tel"
                      name="phone"
                      className="input input-bordered w-full"
                      value={formData.phone || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Status</span>
                    </label>
                    <select
                      name="status"
                      className="select select-bordered w-full"
                      value={formData.status || 'NEW'}
                      onChange={handleInputChange}
                    >
                      {statusOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Address</span>
                    </label>
                    <input
                      type="text"
                      name="address"
                      className="input input-bordered w-full"
                      value={formData.address || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">City</span>
                    </label>
                    <input
                      type="text"
                      name="city"
                      className="input input-bordered w-full"
                      value={formData.city || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">State</span>
                    </label>
                    <input
                      type="text"
                      name="state"
                      className="input input-bordered w-full"
                      value={formData.state || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Postal Code</span>
                    </label>
                    <input
                      type="text"
                      name="zip_code"
                      className="input input-bordered w-full"
                      value={formData.zip_code || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>
                
                <div className="flex justify-end space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => setIsFormOpen(false)}
                    className="btn btn-ghost"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="btn btn-primary"
                    disabled={isLoading}
                  >
                    {isLoading ? (
                      <span className="loading loading-spinner"></span>
                    ) : currentLead ? (
                      'Update Lead'
                    ) : (
                      'Add Lead'
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Leads Table */}
      <div className="overflow-x-auto bg-base-100 rounded-lg shadow">
        <table className="table table-zebra table-sm w-full">
          <thead>
            <tr className="text-base-content">
              <th 
                className="cursor-pointer hover:bg-base-300"
                onClick={() => handleSort('contact1_name')}
              >
                <div className="flex items-center">
                  Contact
                  <SortIndicator field="contact1_name" />
                </div>
              </th>
              <th 
                className="cursor-pointer hover:bg-base-300"
                onClick={() => handleSort('property_address')}
              >
                <div className="flex items-center">
                  Property
                  <SortIndicator field="property_address" />
                </div>
              </th>
              <th 
                className="cursor-pointer hover:bg-base-300"
                onClick={() => handleSort('market_region')}
              >
                <div className="flex items-center">
                  Market
                  <SortIndicator field="market_region" />
                </div>
              </th>
              <th 
                className="cursor-pointer hover:bg-base-300"
                onClick={() => handleSort('status')}
              >
                <div className="flex items-center">
                  Status
                  <SortIndicator field="status" />
                </div>
              </th>
              <th 
                className="cursor-pointer hover:bg-base-300"
                onClick={() => handleSort('assessed_total')}
              >
                <div className="flex items-center">
                  Value
                  <SortIndicator field="assessed_total" />
                </div>
              </th>
              <th 
                className="cursor-pointer hover:bg-base-300"
                onClick={() => handleSort('mls_curr_status')}
              >
                <div className="flex items-center">
                  MLS Status
                  <SortIndicator field="mls_curr_status" />
                </div>
              </th>
              <th 
                className="cursor-pointer hover:bg-base-300"
                onClick={() => handleSort('mls_curr_days_on_market')}
              >
                <div className="flex items-center">
                  DOM
                  <SortIndicator field="mls_curr_days_on_market" />
                </div>
              </th>
            </tr>
          </thead>
            <tbody>
              {isLoading && !leads.length ? (
                <tr><td colSpan={7} className="text-center py-10">Loading leads...</td></tr>
              ) : !isLoading && !leads.length ? (
                <tr><td colSpan={7} className="text-center py-10">No leads found. Try adjusting your search or filters.</td></tr>
              ) : (
                paginatedLeads.map((lead) => {
                  // Create a primary contact object similar to LeadsView
                  const primaryContact = {
                    name: lead.contact1_name || lead.contact1_email_1 || 'No Name',
                    email: lead.contact1_email_1 || 'No Email',
                    type: 'Lead',
                    contactType: 'owner1' as const
                  };
                  
                  return (
                    <tr 
                      key={lead.id} 
                      className="hover:bg-base-200 cursor-pointer transition-colors"
                      onClick={() => handleEdit(lead)}
                    >
                      <td className="py-2">
                        <div className="flex items-center space-x-3">
                          <div>
                            <div className="flex items-center">
                              <span className="font-medium">{primaryContact.name}</span>
                              <span className="badge badge-xs ml-2 badge-info">
                                {primaryContact.type}
                              </span>
                            </div>
                            <div className="text-sm opacity-70 flex items-center mt-1">
                              <Mail className="w-3 h-3 mr-1 flex-shrink-0" />
                              <span className="truncate max-w-xs" title={primaryContact.email}>
                                {primaryContact.email}
                              </span>
                            </div>
                          </div>
                        </div>
                      </td>
                      <td>
                        <div className="flex items-start">
                          <MapPin size={16} className="mr-1.5 mt-0.5 flex-shrink-0 text-red-500" />
                          <div>
                            {lead.property_address || '-'}
                            <br />
                            {lead.property_city || lead.property_state || lead.zip_code 
                              ? `${lead.property_city || ''}${lead.property_city && lead.property_state ? ', ' : ''}${lead.property_state || ''} ${lead.zip_code || ''}` 
                              : null}
                          </div>
                        </div>
                      </td>
                      <td>{lead.market_region || '-'}</td>
                      <td>
                        <span className={`badge ${getStatusBadge(lead.status || 'UNCONTACTED')} badge-sm`}>
                          {lead.status || 'UNCONTACTED'}
                        </span>
                      </td>
                      <td>
                        {lead.assessed_total 
                          ? `$${Number(lead.assessed_total).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}` 
                          : '-'}
                      </td>
                      <td>{lead.mls_curr_status || '-'}</td>
                      <td>{lead.mls_curr_days_on_market || '-'}</td>
                    </tr>
                  );
                })
              )}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        {filteredLeads.length > 0 && (
          <div className="mt-6 flex flex-wrap justify-between items-center gap-4 p-4 bg-base-100 rounded-lg shadow">
            <div>
              <span className="text-sm text-base-content opacity-70">
                Page {currentPage} of {Math.max(1, Math.ceil(filteredLeads.length / rowsPerPage))} (Total: {filteredLeads.length} leads)
              </span>
            </div>
            <div className="flex items-center gap-2">
              <select 
                className="select select-bordered select-sm"
                value={rowsPerPage}
                onChange={(e) => { setRowsPerPage(Number(e.target.value)); setCurrentPage(1); }}
              >
                <option value={25}>25/page</option>
                <option value={50}>50/page</option>
                <option value={100}>100/page</option>
              </select>
              <div className="join">
                <button 
                  onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                  className="join-item btn btn-sm"
                  disabled={currentPage === 1 || isLoading}
                >
                  « Prev
                </button>
                <button 
                  onClick={() => setCurrentPage(p => Math.min(Math.ceil(filteredLeads.length / rowsPerPage), p + 1))}
                  className="join-item btn btn-sm"
                  disabled={currentPage >= Math.ceil(filteredLeads.length / rowsPerPage) || isLoading}
                >
                  Next »
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
      </div>

      {/* Lead Form Modal */}
      {isFormOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-base-100 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold">
                  {currentLead ? 'Edit Lead' : 'Add New Lead'}
                </h2>
                <button
                  onClick={() => setIsFormOpen(false)}
                  className="btn btn-sm btn-circle btn-ghost"
                >
                  ✕
                </button>
              </div>
              
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">First Name</span>
                    </label>
                    <input
                      type="text"
                      name="first_name"
                      className="input input-bordered w-full"
                      value={formData.first_name || ''}
                      onChange={handleInputChange}
                      required
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Last Name</span>
                    </label>
                    <input
                      type="text"
                      name="last_name"
                      className="input input-bordered w-full"
                      value={formData.last_name || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Email</span>
                    </label>
                    <input
                      type="email"
                      name="email"
                      className="input input-bordered w-full"
                      value={formData.email || ''}
                      onChange={handleInputChange}
                      required
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Phone</span>
                    </label>
                    <input
                      type="tel"
                      name="phone"
                      className="input input-bordered w-full"
                      value={formData.phone || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control md:col-span-2">
                    <label className="label">
                      <span className="label-text">Company</span>
                    </label>
                    <input
                      type="text"
                      name="company"
                      className="input input-bordered w-full"
                      value={formData.company || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control md:col-span-2">
                    <label className="label">
                      <span className="label-text">Address</span>
                    </label>
                    <input
                      type="text"
                      name="address"
                      className="input input-bordered w-full"
                      value={formData.address || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">City</span>
                    </label>
                    <input
                      type="text"
                      name="city"
                      className="input input-bordered w-full"
                      value={formData.city || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">State</span>
                    </label>
                    <input
                      type="text"
                      name="state"
                      className="input input-bordered w-full"
                      value={formData.state || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Postal Code</span>
                    </label>
                    <input
                      type="text"
                      name="zip_code"
                      className="input input-bordered w-full"
                      value={formData.zip_code || ''}
                      onChange={handleInputChange}
                    />
                  </div>
                  
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Status</span>
                    </label>
                    <select
                      name="status"
                      className="select select-bordered w-full"
                      value={formData.status || 'NEW'}
                      onChange={handleInputChange}
                    >
                      {statusOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
                
                <div className="flex justify-end space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => setIsFormOpen(false)}
                    className="btn btn-ghost"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="btn btn-primary"
                    disabled={isLoading}
                  >
                    {isLoading ? (
                      <span className="loading loading-spinner"></span>
                    ) : currentLead ? (
                      'Update Lead'
                    ) : (
                      'Add Lead'
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CrmView;
