'use client';

import { Users, PlusCircle, Trash2, Eye, Search, Filter, ChevronUp, ChevronDown, Briefcase, AtSign, Phone, CalendarDays, Tag, UserCheck, Save, XCircle, AlertTriangle, UploadCloud } from 'lucide-react';
import React, { useState, useMemo, ChangeEvent, FormEvent, useEffect, useRef, useCallback } from 'react';

import { createClient } from '@/lib/supabase/client';
import { Background } from '@/once-ui/components/Background';

import type { Tables } from '@/types/supabase';
import type { PostgrestError } from '@supabase/supabase-js'; 

interface MarketRegionsApiResponse {
  ok: boolean;
  marketRegions?: string[];
  error?: string;
}

interface FileUploadResponse {
  ok: boolean;
  error?: string;
  // Add other potential fields like count if your API returns them
  count?: number; 
}

// Type guard for FileUploadResponse
function isFileUploadResponse(obj: unknown): obj is FileUploadResponse {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }
  const record = obj as Record<string, unknown>; // Cast to allow property access

  if (typeof record.ok !== 'boolean') {
    return false;
  }
  if (record.error !== undefined && typeof record.error !== 'string') {
    return false;
  }
  if (record.count !== undefined && typeof record.count !== 'number') {
    return false;
  }
  return true;
}

const LeadsView: React.FC = () => {
  const supabase = createClient(); 

  const [filterMarketRegion, setFilterMarketRegion] = useState<'All' | string>('All');
  const [uploadMarketRegion, setUploadMarketRegion] = useState<string>(""); // New state for upload

  const [sortField, setSortField] = useState<keyof Tables<'normalized_leads'> | ''>('created_at'); 
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc'); 
  
  const [leads, setLeads] = useState<Tables<'normalized_leads'>[]>([]); 
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // State for modals - temporarily disable triggers
  const [isModalOpen, setIsModalOpen] = useState(false);
  // Define initial state for the new lead form, based on Tables<'normalized_leads'>
  const initialNewNormalizedLeadData: Partial<Tables<'normalized_leads'>> = {
    // Fields from normalized_leads.Row, defaulting nullables to null and booleans to false
    assessed_total: null,
    avm_value: null,
    baths: null, // string | null
    beds: null, // string | null
    contact1_email_1: '', // Assuming empty string is acceptable initial for form, will become null if not filled and DB expects null
    contact1_name: '',    // Same as above
    contact2_email_1: null,
    contact2_name: null,
    contact3_email_1: null,
    contact3_name: null,
    converted: false, // boolean, not nullable
    lot_size_sqft: null,
    market_region: '', // Required in form, so empty string initially
    mls_curr_days_on_market: null,
    mls_curr_list_agent_email: null,
    mls_curr_list_agent_name: null,
    mls_curr_status: null,
    notes: null,
    original_lead_id: null, // This will be generated by crypto.randomUUID() later
    price_per_sq_ft: null,
    property_address: '',
    property_city: null,
    property_postal_code: '',
    property_state: '',
    property_type: '',
    source: null,
    square_footage: null,
    status: null, // e.g., 'New', 'Contacted'
    wholesale_value: null,
    year_built: null,
    // id, created_at, updated_at are handled by DB
  };
  const [newLeadData, setNewLeadData] = useState<Partial<Tables<'normalized_leads'>>>(initialNewNormalizedLeadData);
  const [editingLead, setEditingLead] = useState<Tables<'normalized_leads'> | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  // State for CSV Upload
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadStatus, setUploadStatus] = useState<string | null>(null);

  // Server-side filter options
  const [allMarketRegions, setAllMarketRegions] = useState<string[]>(['All']);
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(25);
  const [filterOptionsLoading, setFilterOptionsLoading] = useState(true);

  // useEffect to dynamically populate market regions from leads data
  useEffect(() => {
    let newMarketRegions = ['All'];
    if (leads && leads.length > 0) {
      const dynamicRegions = Array.from(
        new Set(
          leads
            .map(lead => lead.market_region)
            .filter((region): region is string => region != null && String(region).trim() !== '')
        )
      ).sort();
      newMarketRegions = ['All', ...dynamicRegions];
    }
    setAllMarketRegions(newMarketRegions);

    // Preserve selected filter if it's still valid, otherwise reset to 'All'
    if (filterMarketRegion !== 'All' && !newMarketRegions.includes(filterMarketRegion)) {
      setFilterMarketRegion('All');
    }

    setFilterOptionsLoading(false); // Assuming this is still relevant
  }, [leads, filterMarketRegion]); // Dependencies: leads to re-calculate, filterMarketRegion for the validity check

  // Define fetchNormalizedLeads at the component top-level, wrapped in useCallback
  const fetchNormalizedLeads = useCallback(async () => {
    console.log(`Executing fetchNormalizedLeads. Page: ${currentPage}, Rows: ${rowsPerPage}, Sort: ${sortField} ${sortDirection}, Filter: ${filterMarketRegion}`);
    setIsLoading(true);
    setError(null);
    try {
      let query = supabase
        .from('normalized_leads')
        .select('*', { count: 'exact' });
      if (filterMarketRegion !== 'All') {
        query = query.eq('market_region', filterMarketRegion);
      }
      query = query.order((sortField as string) || 'created_at', { ascending: sortDirection === 'asc' });

      // Apply pagination
      const from = (currentPage - 1) * rowsPerPage;
      const to = from + rowsPerPage - 1;
      query = query.range(from, to);

      const { data, error: supabaseError, count } = await query;
      // TODO: Need to set total count for pagination UI, maybe store 'count' in a state variable
      // For now, data is paginated.
      if (supabaseError) {
        throw supabaseError;
      }
      setLeads(data || []);
      // When fetching with count, Supabase returns total count in the 'count' property
      // Need to ensure the query requests the count, e.g. .select('*', { count: 'exact' })
      // For now, we'll set it directly if available from the modified query
      if (count !== null) {
        setTotalLeads(count);
      }
    } catch (err: unknown) {
      if (err instanceof Error) {
        setError(err.message);
      } else if (typeof err === 'object' && err !== null && 'message' in err && typeof err.message === 'string') {
        setError(err.message);
      } else {
        setError('An unknown error occurred while fetching leads.');
      }
    }
    setIsLoading(false);
  }, [supabase, filterMarketRegion, sortField, sortDirection, currentPage, rowsPerPage, setIsLoading, setError, setLeads]);

  useEffect(() => {
    console.log(`Effect trigger for fetch. Sort: ${sortField} ${sortDirection}, Filter: ${filterMarketRegion}, Page: ${currentPage}, Rows: ${rowsPerPage}`);
    fetchNormalizedLeads().catch(err => {
      console.error("Failed to fetch leads on mount or filter change:", err);
      setError(err instanceof Error ? err.message : String(err));
    });
  }, [filterMarketRegion, sortField, sortDirection, supabase, currentPage, rowsPerPage, fetchNormalizedLeads]);

  // No client-side search: use leads array directly
  const displayedLeads = leads;

  const handleSort = (field: keyof Tables<'normalized_leads'> | '') => {
    if (sortField === field) {
      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const SortIndicator = ({ field }: { field: keyof Tables<'normalized_leads'> | '' }) => {
    if (sortField !== field) return null;
    return sortDirection === 'asc' ? <ChevronUp size={16} /> : <ChevronDown size={16} />;
  };

  // --- Modal handlers - Temporarily disabled or simplified ---
  const handleOpenModal = () => {
    setNewLeadData(initialNewNormalizedLeadData); // Reset form data
    setIsModalOpen(true);
  };
  const handleCloseModal = () => setIsModalOpen(false);

    const handleOpenEditModal = (lead: Tables<'normalized_leads'>) => {
      setEditingLead(lead); 
      setNewLeadData({ 
        ...initialNewNormalizedLeadData, 
        ...lead, 
      });
      setIsEditModalOpen(true);
      setError(null); // Clear previous errors
      setUploadStatus(null); // Clear previous statuses
    };
  const handleCloseEditModal = () => { setIsEditModalOpen(false); setEditingLead(null); };

  const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    const target = e.target as HTMLInputElement; // More specific type for checkbox
    setNewLeadData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? target.checked : value,
    }));
  };

  const handleEditInputChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
  };

  const handleSaveLead = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!newLeadData.contact1_name || !newLeadData.contact1_email_1 || !newLeadData.market_region) {
      alert('Contact Name, Email, and Market Region are required.');
      return;
    }

    setIsLoading(true); // Use a more specific loading state for the modal if preferred
    setError(null);

    try {
      // Construct the object to insert, ensuring all fields match the target type.
      // Start with ALL fields from initialNewNormalizedLeadData to ensure full coverage with defaults.
      const baseLeadData = { ...initialNewNormalizedLeadData };

      // Overlay with user-entered data from newLeadData, which is Partial.
      // For numeric fields from string inputs, explicitly convert and handle nulls.
      // For string fields that should be null if empty, handle that too.
      const leadToInsertPrepared = {
        ...baseLeadData,
        ...newLeadData, // User's input overrides defaults

        // Explicitly set/override specific fields with conversions or guarantees
        original_lead_id: crypto.randomUUID(), // This is a required addition
        
        // Ensure numeric types (number | null)
        // If the value from newLeadData is not null/undefined, and its string representation (trimmed) is not empty, convert to Number. Otherwise, null.
        avm_value: (newLeadData.avm_value !== null && newLeadData.avm_value !== undefined) ? (String(newLeadData.avm_value).trim() === '' ? null : Number(newLeadData.avm_value)) : null,
        assessed_total: (newLeadData.assessed_total !== null && newLeadData.assessed_total !== undefined) ? (String(newLeadData.assessed_total).trim() === '' ? null : Number(newLeadData.assessed_total)) : null,
        price_per_sq_ft: (newLeadData.price_per_sq_ft !== null && newLeadData.price_per_sq_ft !== undefined) ? (String(newLeadData.price_per_sq_ft).trim() === '' ? null : Number(newLeadData.price_per_sq_ft)) : null,
        wholesale_value: (newLeadData.wholesale_value !== null && newLeadData.wholesale_value !== undefined) ? (String(newLeadData.wholesale_value).trim() === '' ? null : Number(newLeadData.wholesale_value)) : null,

        // Ensure string types (string | null) - if form sends empty string for optional, convert to null
        contact1_email_1: newLeadData.contact1_email_1 || null,
        contact1_name: newLeadData.contact1_name || null,
        // Add similar handling for ALL other string | null fields from newLeadData if an empty string from the form should be stored as null
        // For example:
        // property_address: newLeadData.property_address || null, // If property_address can be null
        // beds: newLeadData.beds || null, // If beds is string|null and empty form field means null
        // baths: newLeadData.baths || null, // If baths is string|null and empty form field means null
        
        // 'converted' is boolean, newLeadData might have it as true/false from a checkbox
        // If newLeadData.converted is undefined, it will take the default from baseLeadData (false)
        converted: typeof newLeadData.converted === 'boolean' ? newLeadData.converted : baseLeadData.converted,

      } as Omit<Tables<'normalized_leads'>, 'id' | 'created_at' | 'updated_at'> & { original_lead_id: string };

      // Now, assign to the correctly typed variable
      const leadToInsert: typeof leadToInsertPrepared = leadToInsertPrepared;


      // Remove undefined properties that might have come from Partial<NormalizedLead>
      Object.keys(leadToInsert).forEach(key => leadToInsert[key as keyof typeof leadToInsert] === undefined && delete leadToInsert[key as keyof typeof leadToInsert]);

      const { data: insertedLead, error: insertError } = await supabase
        .from('normalized_leads')
        .insert(leadToInsert as any) // Using 'as any' temporarily if TS complains about exact type match for insert
        .select()
        .single(); // Assuming you want the inserted record back

      if (insertError) {
        throw insertError;
      }

      if (insertedLead) {
        setLeads((prevLeads: Tables<'normalized_leads'>[]) => [insertedLead, ...prevLeads]); // Add to local state
      }
      handleCloseModal();
    } catch (err: unknown) {
      if (err instanceof Error) {
        setError(err.message);
      } else if (typeof err === 'object' && err !== null && 'message' in err && typeof err.message === 'string') {
        setError(err.message);
      } else {
        setError('An unknown error occurred while saving the lead.');
      }
      // Keep modal open for user to see error or retry, or close and show a toast
    } finally {
      setIsLoading(false); // Reset general loading state, or modal-specific loading state
    }
  };

    const handleSaveEditedLead = async (e: FormEvent<HTMLFormElement>) => {
      e.preventDefault();
      if (!editingLead || !editingLead.id) {
        setError('No lead selected for editing or missing lead ID.');
        alert('Error: No lead selected for editing or missing lead ID.');
        return;
      }
      if (!newLeadData.contact1_name || !newLeadData.contact1_email_1 || !newLeadData.market_region) {
        alert('Contact Name, Contact Email, and Market Region are required.');
        return;
      }
  
      setIsLoading(true);
      setError(null);
  
      try {
        // Prepare the data for update.
        // We use newLeadData which was populated by handleOpenEditModal.
        // Exclude fields that should not be directly updated or are managed by the DB.
        const { 
          id, // Don't send id in the update payload itself
          created_at, 
          updated_at, 
          original_lead_id, // Usually not changed after creation
          ...payload 
        } = newLeadData;
  
        // Construct the specific update object based on editable fields
        // Ensure correct types and handle nulls/empty strings appropriately
        const updatePayload: Partial<Tables<'normalized_leads'>> = {
          ...initialNewNormalizedLeadData, // Base defaults
          ...payload, // Overwrite with current form data
  
          // Explicit type conversions and null handling for numeric fields
          avm_value: (payload.avm_value !== null && payload.avm_value !== undefined && String(payload.avm_value).trim() !== '') ? Number(String(payload.avm_value).trim()) : null,
          assessed_total: (payload.assessed_total !== null && payload.assessed_total !== undefined && String(payload.assessed_total).trim() !== '') ? Number(String(payload.assessed_total).trim()) : null,
          price_per_sq_ft: (payload.price_per_sq_ft !== null && payload.price_per_sq_ft !== undefined && String(payload.price_per_sq_ft).trim() !== '') ? Number(String(payload.price_per_sq_ft).trim()) : null,
          wholesale_value: (payload.wholesale_value !== null && payload.wholesale_value !== undefined && String(payload.wholesale_value).trim() !== '') ? Number(String(payload.wholesale_value).trim()) : null,
          year_built: payload.year_built != null && String(payload.year_built).trim() !== '' ? String(payload.year_built).trim() : null,
          square_footage: payload.square_footage != null && String(payload.square_footage).trim() !== '' ? String(payload.square_footage).trim() : null,
          mls_curr_days_on_market: payload.mls_curr_days_on_market != null && String(payload.mls_curr_days_on_market).trim() !== '' ? String(payload.mls_curr_days_on_market).trim() : null,
  
  
          // Ensure string fields that should be null if empty are handled
          contact1_name: payload.contact1_name || null, // Assuming name can be null if empty string, adjust if it's required
          contact1_email_1: payload.contact1_email_1 || null, // Same for email
          market_region: payload.market_region || null, // And market region
          
          // For other string fields, if an empty string in form means null in DB:
          property_address: payload.property_address || null,
          property_city: payload.property_city || null,
          property_postal_code: payload.property_postal_code || null,
          property_state: payload.property_state || null,
          property_type: payload.property_type || null,
          beds: payload.beds || null,
          baths: payload.baths || null,
          mls_curr_list_agent_email: payload.mls_curr_list_agent_email || null,
          mls_curr_list_agent_name: payload.mls_curr_list_agent_name || null,
          mls_curr_status: payload.mls_curr_status || null,
          notes: payload.notes || null,
          source: payload.source || null,
          status: payload.status || null,
          contact2_name: payload.contact2_name || null,
          contact2_email_1: payload.contact2_email_1 || null,
          contact3_name: payload.contact3_name || null,
          contact3_email_1: payload.contact3_email_1 || null,
  
          // Boolean field
          converted: typeof payload.converted === 'boolean' ? payload.converted : false,
        };
        
        // Remove any keys from updatePayload that are explicitly undefined
        // as Supabase might interpret undefined differently from null.
        Object.keys(updatePayload).forEach(key => {
          if (updatePayload[key as keyof typeof updatePayload] === undefined) {
            delete updatePayload[key as keyof typeof updatePayload];
          }
        });
  
        const { data: updatedLeadData, error: updateError }: { data: Tables<'normalized_leads'> | null; error: PostgrestError | null } = await supabase
          .from('normalized_leads')
          .update(updatePayload)
          .eq('id', editingLead.id)
          .select()
          .single();
  
        if (updateError) {
          throw updateError;
        }
  
        if (updatedLeadData) {
          setLeads((prevLeads) =>
            prevLeads.map((l) => (l.id === updatedLeadData.id ? updatedLeadData : l))
          );
          setUploadStatus(`Lead '${updatedLeadData.contact1_name}' updated successfully.`);
        }
        handleCloseEditModal();
      } catch (err: unknown) {
        let errorMessage = 'An unknown error occurred while updating lead.';
        if (err instanceof Error) {
          errorMessage = err.message;
        } else if (typeof err === 'object' && err !== null && 'message' in err && typeof (err as any).message === 'string') {
          errorMessage = (err as { message: string }).message;
        }
        setError(errorMessage);
        setUploadStatus(`Failed to update lead: ${errorMessage}`);
        // Optionally, keep the modal open so the user can see the error or retry.
      } finally {
        setIsLoading(false);
      }
    };

  const handleDeleteLead = (leadId: number) => {
    alert(`Deleting lead ${leadId} is temporarily disabled.`);
  };

  // --- CSV Upload Handlers ---
  const handleFileChange = async (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] ?? null;
    setSelectedFile(file);
    if (!file) return;
    if (!uploadMarketRegion.trim()) {
      alert('Market Region is required before upload.');
      return;
    }
    setIsUploading(true);
    setUploadStatus(null);
    const formData = new FormData();
    formData.append('file', file);
    formData.append('market_region', uploadMarketRegion);
    try {
      const res = await fetch('/api/leads/upload', { method: 'POST', body: formData });

      if (!res.ok) {
        // Try to parse as JSON first for a structured error message
        if (res.headers.get('content-type')?.includes('application/json')) {
          const errorData: FileUploadResponse = await res.json();
          throw new Error(errorData.error || `Upload failed with status: ${res.statusText}`);
        }
        // Handle non-JSON error responses, e.g., server error HTML page
        const textError = await res.text();
        throw new Error(textError || `Upload failed with status: ${res.statusText}`);
      }

      // Ensure the response is actually JSON before parsing, even for ok responses
      if (res.headers.get('content-type')?.includes('application/json') !== true) {
        // Handle non-JSON error responses, e.g., server error HTML page
        const textError = await res.text();
        setUploadStatus(`Upload failed: ${res.statusText || textError || 'Server error'}`);
        setIsUploading(false);
        return;
      }
      const rawResponseData: unknown = await res.json();

      if (isFileUploadResponse(rawResponseData)) {
        if (rawResponseData.ok) {
          setUploadStatus(`File processed and leads normalized successfully. ${rawResponseData.count ? `${rawResponseData.count} records processed.` : ''}`);
          await fetchNormalizedLeads(); // Refresh leads after successful upload
        } else {
          setUploadStatus(`Upload failed: ${rawResponseData.error || 'Unknown error from API'}`);
        }
      } else {
        setUploadStatus('Upload failed: Received an invalid response from the server.');
      }
    } catch (err) {
      let errorMessage = 'An unknown error occurred during upload.';
      if (err instanceof Error) {
        errorMessage = err.message;
      }
      setUploadStatus(`Upload failed: ${errorMessage}`);
    }
    setIsUploading(false);
  };

  const handleUploadButtonClick = () => {
    fileInputRef.current?.click();
  };

  // --- End CSV Upload Handlers ---

  if (isLoading && !isUploading) { // Don't show main loading if only uploading
    return <div className="flex justify-center items-center h-screen"><span className="loading loading-spinner loading-lg"></span></div>;
  }

  if (error) {
    return <div className="flex flex-col justify-center items-center h-screen text-error">
      <AlertTriangle size={48} className="mb-4" />
      <p className="text-xl">Error loading leads:</p>
      <p>{error}</p>
    </div>;
  }

  const getStatusBadge = (status: string | null | undefined) => {
    if (!status) return <span className="badge badge-ghost badge-sm">Unknown</span>;
    const normalizedStatus = status.toLowerCase();
    let badgeClass = 'badge-ghost'; 

    if (normalizedStatus.includes('active') || normalizedStatus.includes('new')) badgeClass = 'badge-info';
    else if (normalizedStatus.includes('pending') || normalizedStatus.includes('contract')) badgeClass = 'badge-warning';
    else if (normalizedStatus.includes('sold') || normalizedStatus.includes('closed')) badgeClass = 'badge-success';
    else if (normalizedStatus.includes('expired') || normalizedStatus.includes('cancelled')) badgeClass = 'badge-error';
  
    return <span className={`badge ${badgeClass} badge-sm`}>{status}</span>;
  };

  return (
    <>
    <Background className="p-4 md:p-6 lg:p-8">
      <header className="mb-6">
        <h1 className="text-3xl font-bold text-neutral-content flex items-center">
          <Users size={32} className="mr-3 text-primary" /> Normalized Leads Management
        </h1>
      </header>

      <div className="mb-6 p-4 bg-base-200 rounded-lg shadow flex flex-wrap gap-4 items-center">
        <div className="form-control min-w-[150px]">
          <select 
            className="select select-bordered"
            value={filterMarketRegion}
            onChange={(e) => setFilterMarketRegion(e.target.value)}
            disabled={filterOptionsLoading} // Disable while loading options
          >
            {filterOptionsLoading ? (
              <option value="">Loading regions...</option>
            ) : (
              allMarketRegions.map(region => <option key={region} value={region}>{region}</option>))
            }
          </select>
        </div>
        <button onClick={handleOpenModal} className="btn btn-primary">
          <PlusCircle size={20} className="mr-2" /> Add New Lead
        </button>
        <input
          type="file"
          ref={fileInputRef}
          onChange={(event) => { handleFileChange(event).catch(err => { let msg = 'File processing failed.'; if (err instanceof Error) { msg = err.message; } else if (typeof err === 'string') { msg = err; } /* console.error('File processing error:', msg); */ setUploadStatus(`Error: ${msg}`); }); }}
          accept=".csv"
          style={{ display: 'none' }}
        />
        <button onClick={handleUploadButtonClick} className="btn btn-secondary" disabled={isUploading}>
          {isUploading ? (
            <><span className="loading loading-spinner loading-xs mr-2"></span> Uploading...</>
          ) : (
            <><UploadCloud size={20} className="mr-2" /> Upload CSV</>
          )}
        </button>
        <div className="ml-4">
          <input 
            type="text" 
            placeholder="Market Region for Upload"
            value={uploadMarketRegion}
            onChange={(e) => setUploadMarketRegion(e.target.value)}
            className="w-auto"
          />
        </div>
        <div className="form-control min-w-[120px]">
          <select 
            className="select select-bordered select-sm"
            value={rowsPerPage}
            onChange={(e) => {
              setRowsPerPage(Number(e.target.value));
              setCurrentPage(1); // Reset to first page when rows per page changes
            }}
          >
            <option value={25}>25/page</option>
            <option value={50}>50/page</option>
            <option value={100}>100/page</option>
          </select>
        </div>
      </div>

      {uploadStatus && (
        <div className={`p-4 my-4 rounded-md ${uploadStatus.startsWith('Upload failed') ? 'bg-error text-error-content' : 'bg-success text-success-content'}`}>
          {uploadStatus}
        </div>
      )}

      <div className="overflow-x-auto bg-base-100 rounded-lg shadow">
        <table className="table table-zebra w-full">
          <thead>
            <tr className="text-base-content">
              <th onClick={() => handleSort('contact1_name')} className="cursor-pointer hover:bg-base-200">
                Contact Name <SortIndicator field="contact1_name" />
              </th>
              <th onClick={() => handleSort('contact1_email_1')} className="cursor-pointer hover:bg-base-200">
                Email <SortIndicator field="contact1_email_1" />
              </th>
              <th onClick={() => handleSort('property_address')} className="cursor-pointer hover:bg-base-200">
                Property Address <SortIndicator field="property_address" />
              </th>
              <th onClick={() => handleSort('market_region')} className="cursor-pointer hover:bg-base-200">
                Market Region <SortIndicator field="market_region" />
              </th>
              <th onClick={() => handleSort('avm_value')} className="cursor-pointer hover:bg-base-200">
                AVM Value <SortIndicator field="avm_value" />
              </th>
              {/* MLS Status and Created At headers removed as per user request */}
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {displayedLeads.length > 0 ? (
              displayedLeads.map((lead) => (
                <tr key={lead.id} 
                  className="hover:bg-primary-focus transition-colors duration-150 cursor-pointer" 
                  onClick={() => handleOpenEditModal(lead)}
                >
                  <td>{lead.contact1_name || 'N/A'}</td>
                  <td>{lead.contact1_email_1 || 'N/A'}</td>
                  <td>{lead.property_address || 'N/A'}</td>
                  <td>{lead.market_region || 'N/A'}</td>
                  <td>{lead.avm_value ? `$${lead.avm_value.toLocaleString()}` : 'N/A'}</td>
                  <td>{getStatusBadge(lead.mls_curr_status)}</td>
                  <td>{lead.created_at ? new Date(lead.created_at).toLocaleDateString() : 'N/A'}</td>
                  <td className="space-x-1">
                    {/* Edit button removed as the row is now clickable */}
                    <button 
                      onClick={(e) => { 
                        e.stopPropagation(); // Prevent row's onClick from firing
                        handleDeleteLead(lead.id); 
                      }} 
                      className="btn btn-xs btn-ghost text-error btn-disabled" 
                      title="Delete Lead (Disabled)" 
                      disabled
                    >
                      <Trash2 size={16} />
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={6} className="text-center py-8 text-base-content opacity-70">
                  <Users size={32} className="mx-auto mb-2" />
                  No leads found. Try adjusting your search or filters.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination Controls */} 
      <div className="mt-6 flex justify-between items-center">
        <div>
          <span className="text-sm text-base-content opacity-70">
            Page {currentPage} of {Math.ceil(totalLeads / rowsPerPage) || 1} (Total: {totalLeads} leads)
          </span>
        </div>
        <div className="join">
          <button 
            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
            className="join-item btn btn-sm"
            disabled={currentPage === 1 || isLoading}
          >
            « Previous
          </button>
          <button 
            onClick={() => setCurrentPage(prev => Math.min(Math.ceil(totalLeads / rowsPerPage), prev + 1))}
            className="join-item btn btn-sm"
            disabled={currentPage >= Math.ceil(totalLeads / rowsPerPage) || isLoading}
          >
            Next »
          </button>
        </div>
      </div>

      {isModalOpen && (
        <dialog open className="modal modal-open modal-bottom sm:modal-middle">
          <div className="modal-box w-11/12 max-w-3xl">
            <button type="button" onClick={handleCloseModal} className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
            <h3 className="font-bold text-lg mb-6">Add New Normalized Lead</h3>
            <form onSubmit={(e) => { e.preventDefault(); void handleSaveLead(e); }} className="space-y-4">
              {/* Form fields would need to map to NormalizedLead or a creation DTO */}
              {/* Row 1 */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Contact Name <span className="text-error">*</span></span></label><input type="text" name="contact1_name" value={newLeadData.contact1_name || ''} onChange={handleInputChange} className="input input-bordered w-full" required /></div>
                <div><label className="label"><span className="label-text">Contact Email <span className="text-error">*</span></span></label><input type="email" name="contact1_email_1" value={newLeadData.contact1_email_1 || ''} onChange={handleInputChange} className="input input-bordered w-full" required /></div>
              </div>
              {/* Row 2 */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Market Region <span className="text-error">*</span></span></label><input type="text" name="market_region" value={newLeadData.market_region || ''} onChange={handleInputChange} className="input input-bordered w-full" required /></div>
                <div><label className="label"><span className="label-text">MLS Current Status</span></label><input type="text" name="mls_curr_status" value={newLeadData.mls_curr_status || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>
              {/* Row 3: Property Address Details */}
              <div><label className="label"><span className="label-text">Property Full Address</span></label><input type="text" name="property_address" value={newLeadData.property_address || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div><label className="label"><span className="label-text">Property State</span></label><input type="text" name="property_state" value={newLeadData.property_state || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Property Postal Code</span></label><input type="text" name="property_postal_code" value={newLeadData.property_postal_code || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>
              {/* Row 4 */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Property Type</span></label><input type="text" name="property_type" value={newLeadData.property_type || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">AVM Value</span></label><input type="number" name="avm_value" value={newLeadData.avm_value || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>
              
              {error && <p className="text-error text-sm">Error: {error}</p>}

              <div className="modal-action mt-6">
                <button type="button" onClick={handleCloseModal} className="btn btn-ghost">Cancel</button>
                <button type="submit" className="btn btn-primary" disabled={isLoading}>{isLoading ? <span className='loading loading-spinner loading-xs'></span> : 'Save Lead'}</button>
              </div>
            </form>
          </div>
        </dialog>
      )}

      {/* Edit Lead Modal */}
      {isEditModalOpen && editingLead && (
         <dialog open className="modal modal-open modal-bottom sm:modal-middle">
          <div className="modal-box w-11/12 max-w-3xl">
            <button type="button" onClick={handleCloseEditModal} className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
            <h3 className="font-bold text-lg mb-6">Edit Lead: {editingLead.contact1_name || 'N/A'}</h3>
            <form onSubmit={(event) => { handleSaveEditedLead(event).catch(err => {
                let errorMessage = 'Failed to save lead details.';
                if (err instanceof Error) {
                  errorMessage = err.message;
                } else if (typeof err === 'string') {
                  errorMessage = err;
                }
                setError(errorMessage);
              }); }} className="space-y-4">
              {/* Row 1: Contact Info */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Contact Name <span className="text-error">*</span></span></label><input type="text" name="contact1_name" value={newLeadData.contact1_name || ''} onChange={handleInputChange} className="input input-bordered w-full" required /></div>
                <div><label className="label"><span className="label-text">Contact Email <span className="text-error">*</span></span></label><input type="email" name="contact1_email_1" value={newLeadData.contact1_email_1 || ''} onChange={handleInputChange} className="input input-bordered w-full" required/></div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Contact 2 Name</span></label><input type="text" name="contact2_name" value={newLeadData.contact2_name || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Contact 2 Email</span></label><input type="email" name="contact2_email_1" value={newLeadData.contact2_email_1 || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>
               <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Contact 3 Name</span></label><input type="text" name="contact3_name" value={newLeadData.contact3_name || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Contact 3 Email</span></label><input type="email" name="contact3_email_1" value={newLeadData.contact3_email_1 || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>

              {/* Row 2: Market & MLS */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Market Region <span className="text-error">*</span></span></label><input type="text" name="market_region" value={newLeadData.market_region || ''} onChange={handleInputChange} className="input input-bordered w-full" required /></div>
                <div><label className="label"><span className="label-text">MLS Current Status</span></label><input type="text" name="mls_curr_status" value={newLeadData.mls_curr_status || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>
              
              {/* Row 3: Property Address Details */}
              <div><label className="label"><span className="label-text">Property Full Address</span></label><input type="text" name="property_address" value={newLeadData.property_address || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div><label className="label"><span className="label-text">Property City</span></label><input type="text" name="property_city" value={newLeadData.property_city || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Property State</span></label><input type="text" name="property_state" value={newLeadData.property_state || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Property Postal Code</span></label><input type="text" name="property_postal_code" value={newLeadData.property_postal_code || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>

              {/* Row 4: Property Details */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Property Type</span></label><input type="text" name="property_type" value={newLeadData.property_type || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Year Built</span></label><input type="number" name="year_built" value={newLeadData.year_built || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Beds</span></label><input type="text" name="beds" value={newLeadData.beds || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Baths</span></label><input type="text" name="baths" value={newLeadData.baths || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Square Footage</span></label><input type="number" name="square_footage" value={newLeadData.square_footage || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Lot Size (SqFt)</span></label><input type="text" name="lot_size_sqft" value={newLeadData.lot_size_sqft || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>

              {/* Row 5: Financials */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">AVM Value</span></label><input type="number" name="avm_value" value={newLeadData.avm_value || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Assessed Total</span></label><input type="number" name="assessed_total" value={newLeadData.assessed_total || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                 <div><label className="label"><span className="label-text">Price Per SqFt</span></label><input type="number" name="price_per_sq_ft" value={newLeadData.price_per_sq_ft || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Wholesale Value</span></label><input type="number" name="wholesale_value" value={newLeadData.wholesale_value || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>

              {/* Row 6: MLS Details */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">MLS Days On Market</span></label><input type="number" name="mls_curr_days_on_market" value={newLeadData.mls_curr_days_on_market || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">MLS List Agent Name</span></label><input type="text" name="mls_curr_list_agent_name" value={newLeadData.mls_curr_list_agent_name || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>
              <div><label className="label"><span className="label-text">MLS List Agent Email</span></label><input type="email" name="mls_curr_list_agent_email" value={newLeadData.mls_curr_list_agent_email || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              
              {/* Row 7: Notes */}
              <div><label className="label"><span className="label-text">Notes</span></label><textarea name="notes" value={newLeadData.notes || ''} onChange={handleInputChange} className="textarea textarea-bordered w-full" rows={3}></textarea></div>

              {/* Row 8: Other Details */}
               <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><label className="label"><span className="label-text">Lead Status</span></label><input type="text" name="status" value={newLeadData.status || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
                <div><label className="label"><span className="label-text">Lead Source</span></label><input type="text" name="source" value={newLeadData.source || ''} onChange={handleInputChange} className="input input-bordered w-full" /></div>
              </div>

              {/* Converted Checkbox */}
              <div className="form-control">
                <label className="label cursor-pointer">
                  <span className="label-text">Converted Lead</span> 
                  <input type="checkbox" name="converted" checked={!!newLeadData.converted} onChange={(e) => setNewLeadData(prev => ({...prev, converted: e.target.checked }))} className="checkbox checkbox-primary" />
                </label>
              </div>

              {error && <p className="text-error text-sm mt-2">Error: {error}</p>}
              {uploadStatus && !error && <p className="text-success text-sm mt-2">{uploadStatus}</p>}


              <div className="modal-action mt-6">
                <button type="button" onClick={handleCloseEditModal} className="btn btn-ghost">Cancel</button>
                <button type="submit" className="btn btn-primary" disabled={isLoading}>{isLoading ? <span className='loading loading-spinner loading-xs'></span> : 'Save Changes'}</button>
              </div>
            </form>
          </div>
        </dialog>
      )}
    </Background>
  </> 
  );
} // End of LeadsView function body

export default LeadsView;

