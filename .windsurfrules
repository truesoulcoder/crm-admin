CRM Admin App Codebase Summary

Purpose: This is a modern CRM admin application focused on lead management, campaign management, sender (email account) management, template management, and dashboard analytics. It is designed for real estate or property lead workflows, supporting both admin and lower-level employee roles.

Core Features:

1. Lead Management: Upload, normalize, and manage leads from CSV files. Leads are displayed in an editable, sortable, filterable, and paginated table. Each row can be clicked to open a modal for editing lead details and adding notes.
2. CRM View: Similar to lead management but for individual lead handling by employees. Allows adding/editing leads one at a time with the same table features.
3. Email Sender Management: Manage Gmail accounts used for sending emails, supporting domain-wide delegation and impersonation. Senders can be added, edited, or bulk-uploaded via CSV.
4. Template Management: Create, edit, and save email and document templates (e.g., LOIs). Templates support placeholders for dynamic content and are used in campaigns.
5. Campaign Management: Create and manage email campaigns, selecting templates, senders, and market regions. Campaigns support quota-based, interval-driven sending to avoid spam filters.
6. Dashboard: Real-time monitoring of operations, KPIs, and campaign performance. Displays stats, charts, and activity logs for admin oversight.

Tech Stack:
1. Frontend: Next.js (React), DaisyUI, Once UI, Lucide icons, Tiptap (for rich text editing in templates).
2. Backend/Services: Supabase (database and auth), custom API endpoints, integration with Gmail API for sender impersonation.
3. Other: TypeScript throughout, modular component structure, modern state management, and strong type safety.

Key Architectural Notes:
1. Uses modular views for each major feature: LeadsView, CrmView, DashboardView, CampaignsView, EmailSendersView, TemplatesView.
2. Auth is enforced for all main pages.
3. Data fetching and mutations are handled via Supabase and REST endpoints.
4. UI is designed for usability: sortable/filterable tables, modals for editing, and real-time feedback.

Intended User Roles:
1. Admins: Full access to lead uploads, campaign management, sender and template configuration, and dashboard analytics.
2. Employees: Work assigned leads individually in a CRM-like interface.

In summary:

This app is a full-featured, modern CRM admin panel for real estate lead management and outreach automation, with strong emphasis on usability, real-time analytics, and operational control.

OUR DEV PLAN
we need to focus on the core features only.  they are:

1.  Lead management feature, to upload raw csv files containing leads that get processed into our normalized_leads table.  It's important to get the leads to show up in a functionally editable table so we can use it like a CRM - this needs to happen.  It needs to have sortable columns, filtering by market region, paginated rows, with option to select 25-50-or 100 per page, onhover row highlighting that highlights the entire row, and most importantly clickable rows that popup lead card modals to edit the data, add notes if we want to, and save the data when we're done making changes to that lead.

1.a  Our CRM feature mimics the look and feel of our leads management feature, but is for our lower level employees to work leads assigned to them.  It looks almost identical to the leads management feature except it doesnt do bulk uploads it does individual lead additions.  Otherwise it's styled just like our leads management feature (same kind of table stylings and features like sorting, filtering, pagination, and behaviors)

2.  Email sender management feature, to have an ability to add our gmail accounts as email senders to impersonate emails sent to the property lead, for every contact with an email address.  We're using our  domain wide delegation service key for impersonating multiple accounts using gmail api and google api.  

3.  Template management feature, to create, edit, and save email templates (body and subject) and document templates (letter of intent or something else we create) so the email senders can send emails with attached documents to the contacts with emails for every property lead.

4.  A campaign management feature, allowing creation, modification, configuration, and saving of email campaigns.  This must have ability to select which templates, senders, and market's to send emails to.  We need a setting for quotas, to drip market these emails at intervals over the course of an 8 hour workday.  Not a cronjob, just a quota with intervals preconfigured that allows the sending of emails to go unnoticed by gmails spam filtering.

5.  A dashboard to control the entire operation and monitor the progress in real time, including graphs/charts and statistics for each email sender account.  We're tracking KPI data for emails (sent, delivered, bounced) and the control for starting and stopping the engine that assigns leads to email senders has to be wired to do a pre-flight check to test send one email from each sender to the single user who is logged in to control the app (in this case, me and my address chrisphillips@truesoulpartners.com).  

6.  Everything must be operational, communicating to the api and rpc and databases as it should.

7.  Do not ask me shit, follow your instinct on how it should be written when it comes to code.